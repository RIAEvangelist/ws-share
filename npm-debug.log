0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.11.3
3 info using node@v0.12.7
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/bmiller/git/ws-share',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/bmiller/.npm/ws-share/0.0.7/package.tgz not in flight; packing
9 verbose tar pack [ '/home/bmiller/.npm/ws-share/0.0.7/package.tgz',
9 verbose tar pack   '/home/bmiller/git/ws-share' ]
10 verbose tarball /home/bmiller/.npm/ws-share/0.0.7/package.tgz
11 verbose folder /home/bmiller/git/ws-share
12 info prepublish ws-share@0.0.7
13 verbose addLocalTarball adding from inside cache /home/bmiller/.npm/ws-share/0.0.7/package.tgz
14 silly cache afterAdd ws-share@0.0.7
15 verbose afterAdd /home/bmiller/.npm/ws-share/0.0.7/package/package.json not in flight; writing
16 verbose afterAdd /home/bmiller/.npm/ws-share/0.0.7/package/package.json written
17 silly publish { name: 'ws-share',
17 silly publish   version: '0.0.7',
17 silly publish   description: 'sharing websockets between different modules or components for react, flux, reflux, webpack or browserify',
17 silly publish   main: 'WS.js',
17 silly publish   scripts:
17 silly publish    { test: 'echo "Error: no test specified" && exit 1',
17 silly publish      start: 'node devServer.js' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/RIAEvangelist/ws-share.git' },
17 silly publish   engines: { node: '>=0.10.0' },
17 silly publish   keywords:
17 silly publish    [ 'react',
17 silly publish      'react.js',
17 silly publish      'reactjs',
17 silly publish      'websocket',
17 silly publish      'websockets',
17 silly publish      'web',
17 silly publish      'socket',
17 silly publish      'sockets',
17 silly publish      'share',
17 silly publish      'shared',
17 silly publish      'sharing',
17 silly publish      'ws',
17 silly publish      'list',
17 silly publish      'common',
17 silly publish      'flux',
17 silly publish      'reflux',
17 silly publish      'component',
17 silly publish      'components',
17 silly publish      'store',
17 silly publish      'stores',
17 silly publish      'action',
17 silly publish      'actions' ],
17 silly publish   author: { name: 'Brandon Nozaki Miller' },
17 silly publish   license: 'DBAD',
17 silly publish   bugs: { url: 'https://github.com/RIAEvangelist/ws-share/issues' },
17 silly publish   homepage: 'https://github.com/RIAEvangelist/ws-share#readme',
17 silly publish   dependencies: { 'object-assign': '^4.0.1', 'object.observe': '^0.2.4' },
17 silly publish   devDependencies:
17 silly publish    { 'css-loader': '^0.19.0',
17 silly publish      'jsx-loader': '^0.13.2',
17 silly publish      react: '^0.13.3',
17 silly publish      'style-loader': '^0.12.4' },
17 silly publish   readme: '# ws-share\nA module allowing sharing of websockets between different functions, modules, scripts, actions, stores, and/or components with vanilla js (plain js), react, webpack or browserify. ***This module is brand new, don\'t hold its lack of stats and install against it, give it a shot!***\n\nnpm ws-share info :  [See npm trends and stats for ws-share](http://npm-stat.com/charts.html?package=ws-share&author=&from=&to=)  \n![ws-share npm version](https://img.shields.io/npm/v/ws-share.svg) ![supported node version for ws-share](https://img.shields.io/node/v/ws-share.svg) ![total npm downloads for ws-share](https://img.shields.io/npm/dt/ws-share.svg) ![monthly npm downloads for ws-share](https://img.shields.io/npm/dm/ws-share.svg) ![npm licence for ws-share](https://img.shields.io/npm/l/ws-share.svg)\n\n` npm install --save ws-share `  \n\n[![RIAEvangelist](https://avatars3.githubusercontent.com/u/369041?v=3&s=100)](https://github.com/RIAEvangelist)\n\nGitHub info :  \n[![ws-share GitHub Release](https://img.shields.io/github/release/RIAEvangelist/ws-share.svg) ![GitHub license ws-share license](https://img.shields.io/github/license/RIAEvangelist/ws-share.svg) ![open issues for ws-share on GitHub](https://img.shields.io/github/issues/RIAEvangelist/ws-share.svg)](http://riaevangelist.github.io/ws-share/)\n\n[ws-share site](http://riaevangelist.github.io/ws-share/)\n\n## What does ws-share do?\nws-share managaes a list of open websockets and protocols allowing websockets to be easily shared between multiple vanilla js (plain js), or common js modules. Each module can create a new WS instance for a given uri and protocol. However, if a socket with that uri & protocol list has already been opened, WS will refrence the open socket instead of creating a new socket for the same uri and protocol list.\n\nws-share is designed to feel like you are naturally working with a standard WebSocket\n\n## Tips\nFor vanilla js (just plain old js) include the browser.js file\n\n    <script src=\'ws-share-vanilla.js\' />\n\nYou should check ws.readyState upon creation.  \n\n***Why?***  \n\nIf the websocket was already opened  `ws.on(\'open\',callback)` wont be called. So checking the ready state will allow you to perform any initialization needed in your component, action or store.\n\n|method or value    |type   |mutable|description|\n|-------------------|-------|-------|-----------|\n|uri                |string |false  |the uri of the shared ws|\n|protocols          |array/string|false  |the protocols of the shared ws|\n|on                 |func   |false  |bind event listener to shared websocket|\n|off                |func   |false  |UNbind event listener to shared websocket|\n|addEventListener   |func   |false  |bind event listener to shared websocket|\n|removeEventListener|func   |false  |UNbind event listener to shared websocket|\n|send               |func   |false  |Send data to server|\n|readyState         |number |not by user|The current readyState of the shared websocket|\n|toObject           |func   |false  |returns an object representation of an instantiated version of this class|\n\n\n## Contributing\n\n1. Pull or Fork code.\n2. from the cloned directory run ` npm install ` (this will install required dependancies, depending on your system may require)\n3. be awesome!\n\n## Running Example React Shared WebSocket Echo App\nThis very basic react.js example app has two components share the same websocket. Neither is aware they are sharing though. The Input component sends info upto the server while the Output listens for messages from the server. The [websocket.org](https://websocket.org/) server here just echo\'s all information back for demo purposes.\n\n1. ` npm install `\n2. ` npm start echo `\n3. goto [localhost:8080](http://localhost:8080)\n4. type some stuff and watch both components use the same websocket\n\n\n## Create or Use Existing Shared WebSocket\nThis follows the [standard WebSocket interface](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications).  \n\n```javascript  \n\n    //commonjs\n    var WS=require(\'ws-share\');\n    //or vanilla js\n    <script src=\'ws-share-vanilla.js\' />\n\n\n    var basicWS=new WS(\'wss://echo.websocket.org/?encoding=text\');\n\n    var wsWithOneProtocol=new WS(\'wss://echo.websocket.org/?encoding=text\',\'stream\');\n\n    var wsWithManyProtocols=new WS(\n        \'wss://echo.websocket.org/?encoding=text\',\n        [\n            \'stream\',\n            \'chat\',\n            \'whatever\'\n        ]\n    );\n\n```\n\n\n## Bind Events on a Shared WebSocket\nThis follows the [standard WebSocket interface](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications) and also extends that interface with ` .on ` and ` .off ` as shortcuts for ` .addEventListener ` and ` .removeEventListener ` as on/off is commonly used in node applications and may be more intuitive for some developers.  All standard events are supported. ***Remember the scope of your callback is the shared websocket! if you want to use the react modules scope use*** ` .bind(this) ` ***on the callback***\n\n```javascript  \n\n    //commonjs\n    var WS=require(\'ws-share\');\n    //or vanilla js\n    <script src=\'ws-share-vanilla.js\' />\n\n    var ws=new WS(\'wss://echo.websocket.org/?encoding=text\');\n\n    ws.on(\n        \'open\',\n        function(e){\n            console.log(\'shared websocket open!\');\n        }\n    )\n\n    ws.on(\n        \'close\',\n        function(e){\n            console.log(\'shared websocket closed!\');\n        }\n    )\n\n    ws.on(\n        \'error\',\n        function(e){\n            console.log(\'OMG there\\\'s been an error!\',e);\n        }\n    )\n\n    ws.on(\n        \'message\',\n        function(e){\n            console.log(\'got message on shared ws!\',e.data);\n        }\n    )\n\n\n```\n\n## Basic Example :\nYou will notice this looks just like a standard websocket creation, but behind the scenes it stores a refrence to share with any other component, store, or action which may also need access to this same websocket.  \n\n```javascript  \n\n    //commonjs\n    var WS=require(\'ws-share\');\n    //or vanilla js\n    <script src=\'ws-share-vanilla.js\' />\n\n    var ws=new WS(\'wss://echo.websocket.org/?encoding=text\');\n    ws.on(\n        \'message\',\n        function(e){\n            console.log(e.data);\n        }\n    );\n\n```\n\n## Basic React Send Example :\nYou will notice this looks just like a standard websocket creation, but behind the scenes it stores a refrence to share with any other component, store, or action which may also need access to this same websocket. For example, the next example, Output would share this same ws without needing a different format.\n\n```javascript  \n\n    var React=require(\'react\');\n    var WS=require(\'ws-share\');\n\n    var Input=React.createClass(\n        {\n            componentWillMount:function(){\n                this.ws=new WS(\'wss://echo.websocket.org/?encoding=text\');\n            },\n            componentWillUnmount:function(){\n                this.ws=null;\n            },\n            _change:function(e){\n                if(this.ws.readyState!==1){\n                    console.log(\'WS not yet connected or already disconnected. Can not send message.\');\n                    return;\n                }\n                this.ws.send(e.target.value);\n            },\n            render:function(){\n                return (\n                    <div>\n                        <h3>\n                            Send To Server\n                        </h3>\n                        <input onChange={this._change} />\n                    </div>\n                )\n            }\n        }\n    );\n\n    module.exports=Input;\n\n```\n\n## Basic React Listen for Message Example :\nYou will notice this looks just like a standard websocket creation, but behind the scenes it stores a refrence to share with any other component, store, or action which may also need access to this same websocket. For example, the previous example, Input would share this same ws without needing a different format.\n\n```javascript  \n\n    var React=require(\'react\');\n    var WS=require(\'ws-share\');\n\n    var Output=React.createClass(\n        {\n            getInitialState:function(){\n                return {\n                    message:\'\'\n                }\n            },\n            componentWillMount:function(){\n                this.ws=new WS(\'wss://echo.websocket.org/?encoding=text\');\n                this.ws.on(\n                    \'message\',\n                    function(e){\n                        this.setState(\n                            {\n                                message:e.data\n                            }\n                        )\n                    //We want to use this.state,\n                    //so we have to bind the react component\n                    //scope to the callback\n                    }.bind(this)\n                );\n            },\n            componentWillUnmount:function(){\n                this.ws=null;\n            },\n            _change:function(e){\n                if(this.ws.readyState!==1){\n                    console.log(\'WS not yet connected or already disconnected. Can not send message.\');\n                    return;\n                }\n                this.ws.send(e.target.value);\n            },\n            render:function(){\n                return (\n                    <div>\n                        <h3>\n                            Got From Server\n                        </h3>\n                        <textarea value={this.state.message} />\n                    </div>\n                )\n            }\n        }\n    );\n\n    module.exports=Output;\n\n\n```\n\n---\n\nThis work is licenced via the [DBAD Public Licence](http://www.dbad-license.org/).\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'c21ae11c0e30790657b8f8c453f87f88b706bb23',
17 silly publish   _id: 'ws-share@0.0.7',
17 silly publish   _shasum: '6842d8ce6e77c30181f7b60f3476445bb70732ac',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name ws-share
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/ws-share
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/bmiller/.npm/ws-share/0.0.7/package.tgz
25 verbose request uri https://registry.npmjs.org/ws-share
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 12:37:14
28 verbose request id 13a66a25270c1000
29 http request PUT https://registry.npmjs.org/ws-share
30 http 403 https://registry.npmjs.org/ws-share
31 verbose headers { 'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=60',
31 verbose headers   'content-length': '95',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Sun, 27 Sep 2015 19:37:15 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-sjc3124-SJC',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1443382634.792871,VS0,VE257' }
32 verbose request invalidating /home/bmiller/.npm/registry.npmjs.org/ws-share on PUT
33 error publish Failed PUT 403
34 verbose stack Error: "You cannot publish over the previously published version 0.0.7." : ws-share
34 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
34 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
34 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:354:22)
34 verbose stack     at Request.emit (events.js:110:17)
34 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1207:14)
34 verbose stack     at Request.emit (events.js:129:20)
34 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1153:12)
34 verbose stack     at IncomingMessage.emit (events.js:129:20)
34 verbose stack     at _stream_readable.js:908:16
34 verbose stack     at process._tickCallback (node.js:355:11)
35 verbose statusCode 403
36 verbose pkgid ws-share
37 verbose cwd /home/bmiller/git/ws-share
38 error Linux 3.13.0-63-generic
39 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
40 error node v0.12.7
41 error npm  v2.11.3
42 error code E403
43 error "You cannot publish over the previously published version 0.0.7." : ws-share
44 error If you need help, you may report this error at:
44 error     <https://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
